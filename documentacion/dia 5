Inicio 2:04pm
Termine: 4:10pm

Instalación de Google Maps

Ingreso en, y busco la get a key
https://developers.google.com/maps/documentation/javascript/

Creo una clave para un dominio en particular y genero la clave
 AIzaSyC0r0JXuJTjfpr3ZhXLmoaZyGQ00BRS7Rc 

 Clave para realizar pruebas fuera del dominio 
 AIzaSyBggzMzBJgMg3k86bxBnZTzwxr9vTCFJ4s

 creamos un archivo .js con
 //variables globales map
document.body.addEventListener("load", iniciarGoogleMap());

var map;

function iniciarGoogleMap() 
      {
  
        crearMapa();
        
        var icono = 'http://gmaps-samples.googlecode.com/svn/trunk/markers/green/blank.png';
        var titulo = 'Pulsa aquí';
        var mensaje = '<div id="content">'+
      '<div id="siteNotice">'+
      '</div>'+
      '<h1 id="firstHeading" class="firstHeading">Uluru</h1>'+
      '<div id="bodyContent">'+
      '<p><b>Uluru</b>, also referred to as <b>Ayers Rock</b>, is a large ' +
      'sandstone rock formation in the southern part of the '+
      'Northern Territory, central Australia. It lies 335&#160;km (208&#160;mi) '+
      'south west of the nearest large town, Alice Springs; 450&#160;km '+
      '(280&#160;mi) by road. Kata Tjuta and Uluru are the two major '+
      'features of the Uluru - Kata Tjuta National Park. Uluru is '+
      'sacred to the Pitjantjatjara and Yankunytjatjara, the '+
      'Aboriginal people of the area. It has many springs, waterholes, '+
      'rock caves and ancient paintings. Uluru is listed as a World '+
      'Heritage Site.</p>'+
      '<p>Attribution: Uluru, <a href="http://en.wikipedia.org/w/index.php?title=Uluru&oldid=297882194">'+
      'http://en.wikipedia.org/w/index.php?title=Uluru</a> '+
      '(last visited June 22, 2009).</p>'+
      '</div>'+
      '</div>';

        var posicion = new google.maps.LatLng(-0.140825, -78.469967);

        crearMarcador(icono,titulo,mensaje,posicion);


      }

function crearMapa(){
          var mapOptions = {
          center: new google.maps.LatLng(-0.140825, -78.469967),
          zoom: 17,
          mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        
        map = new google.maps.Map(document.getElementById("map_canvas"),
            mapOptions);

}
      
function crearMarcador(icono,titulo,mensaje, posicion){
  var marcador = new google.maps.Marker({
    position: posicion, 
    map: map, 
    title: titulo, 
    icon: icono, 
    cursor: 'default', 
    draggable: true });
        
        var mensajeMostrarTXT = mensaje;
        var mensajeMarcador = new google.maps.InfoWindow({ content: mensajeMostrarTXT });

        google.maps.event.addListener(marcador,'click', function(){ mensajeMarcador.open(map,marcador);} );
}
      google.maps.event.addDomListener(window, 'load', initialize);




Despues agregamos este archivo al final del documento dentro de body

Agregamos las siguientes lineas dentro del body donde queremos que se muestre, no olvidar cambiar la key
	<!--Google Map, cambiar la key-->
	<script type="text/javascript"
      src="http://maps.googleapis.com/maps/api/js?key=AIzaSyBggzMzBJgMg3k86bxBnZTzwxr9vTCFJ4s&sensor=TRUE&language=es&region=EC">
    </script>

	<div id="googleMapContacto" class="container-fluid">
			<div class="row">
					<div id="map_canvas" style="width:100%; height:400px"></div>
			</div>
	</div><!--googleMapContacto-->


Datos de contacto

<div class="col-md-6">
	<h2>Datos de Contacto</h2>
	<p><i class="fa fa-map-marker"></i> El día N37-111 y El Mercurio, Quito</p>
	<p><i class="fa fa-phone"></i> PBX Ecuador (593 2) 224 01 79<br>(593 2)2 255 942</p>	
	<p><i class="fa fa-envelope"></i> info@gmacro.com</p>
	<p><i class="fa fa-skype"></i> gerencia-ecuador</p>
	<p><i class="fa fa-clock-o"></i> Lunes - Viernes 9:00 - 18:00</p>

</div>

Para centrar elementos

#informacionFooter {
    display: table;
    height: 300px;
}

#simulacionCelda {
    display: table-cell;
    vertical-align: middle;
    text-align: center;
}

******************************************************************************************************************
Inicio: 17:48
Termine:

Creo el archivo del header
header.php 

Agregar al principio 
<?php 
wp_head(); 

?>

Para el titulo
<link rel="shortcut icon" href="<?php echo get_stylesheet_directory_uri(); ?>/favicon.ico" /> 
<title>Estylos y Flores |<?php echo wp_title();?></title>

Para las imagenes
<?php echo get_template_directory_uri();?>/img/logo.png


El menu

<div class="row">
            <div class="col-md-2">
              <a class="navbar-brand" href="#"><img src="<?php echo get_template_directory_uri();?>/img/logoNormal.jpg"></a>
            </div>
          <div class="col-md-10">
          <nav class="navbar " role="navigation">

              <!-- Agrupamos los elementos que se mostrarán en dispositivos móviles -->
              <div class="navbar-header">
                
                  <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                      <!--Muestra solo a screen readers-->
                      <span class="sr-only">Desplegar navegación</span>
                      MENÚ <i class="fa fa-bars"></i>
                  </button>


              </div>

              <!-- Agrupar los enlaces de navegación, los formularios y cualquier
                 otro elemento que se pueda ocultar al minimizar la barra -->
            <?php

            if ( has_nav_menu( 'Menu-Superior' ) ) { /* if menu location 'primary-menu' exists then use custom menu */


            $defaults = array(
              'theme_location'  => 'Menu-Superior',
              'menu'            => '',
              'container'       => 'div',
              'container_class' => 'collapse navbar-collapse navbar-ex1-collapse',
              'container_id'    => '',
              'menu_class'      => 'menu',
              'menu_id'         => '',
              'echo'            => true,
              'fallback_cb'     => 'wp_page_menu',
              'before'          => '',
              'after'           => '',
              'link_before'     => '',
              'link_after'      => '',
              'items_wrap'      => '<ul id="%1$s" class="nav navbar-nav">%3$s</ul>',
              'depth'           => 0,
              'walker'      => new wp_bootstrap_navwalker()
            );

            wp_nav_menu( $defaults );


            }

            ?>
          </nav>

          </div><!--col md 10-->
         
        </div>


    En functions agregar
    require_once('wp_bootstrap_navwalker.php');

  function registrarMenuSuperior() {
    register_nav_menu('Menu-Superior', __('Menú Superior'));
  }
  add_action('init', 'registrarMenuSuperior');

  Y aumentar el archivo wp_bootstrap_navwalker.php

  <?php
/**
 * Class Name: wp_bootstrap_navwalker
 * GitHub URI: https://github.com/twittem/wp-bootstrap-navwalker
 * Description: A custom WordPress nav walker class to implement the Bootstrap 3 navigation style in a custom theme using the WordPress built in menu manager.
 * Version: 2.0.4
 * Author: Edward McIntyre - @twittem
 * License: GPL-2.0+
 * License URI: http://www.gnu.org/licenses/gpl-2.0.txt
 */
class wp_bootstrap_navwalker extends Walker_Nav_Menu {
  /**
   * @see Walker::start_lvl()
   * @since 3.0.0
   *
   * @param string $output Passed by reference. Used to append additional content.
   * @param int $depth Depth of page. Used for padding.
   */
  public function start_lvl( &$output, $depth = 0, $args = array() ) {
    $indent = str_repeat( "\t", $depth );
    $output .= "\n$indent<ul role=\"menu\" class=\" dropdown-menu\">\n";
  }
  /**
   * @see Walker::start_el()
   * @since 3.0.0
   *
   * @param string $output Passed by reference. Used to append additional content.
   * @param object $item Menu item data object.
   * @param int $depth Depth of menu item. Used for padding.
   * @param int $current_page Menu item ID.
   * @param object $args
   */
  public function start_el( &$output, $item, $depth = 0, $args = array(), $id = 0 ) {
    $indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';
    /**
     * Dividers, Headers or Disabled
     * =============================
     * Determine whether the item is a Divider, Header, Disabled or regular
     * menu item. To prevent errors we use the strcasecmp() function to so a
     * comparison that is not case sensitive. The strcasecmp() function returns
     * a 0 if the strings are equal.
     */
    if ( strcasecmp( $item->attr_title, 'divider' ) == 0 && $depth === 1 ) {
      $output .= $indent . '<li role="presentation" class="divider">';
    } else if ( strcasecmp( $item->title, 'divider') == 0 && $depth === 1 ) {
      $output .= $indent . '<li role="presentation" class="divider">';
    } else if ( strcasecmp( $item->attr_title, 'dropdown-header') == 0 && $depth === 1 ) {
      $output .= $indent . '<li role="presentation" class="dropdown-header">' . esc_attr( $item->title );
    } else if ( strcasecmp($item->attr_title, 'disabled' ) == 0 ) {
      $output .= $indent . '<li role="presentation" class="disabled"><a href="#">' . esc_attr( $item->title ) . '</a>';
    } else {
      $class_names = $value = '';
      $classes = empty( $item->classes ) ? array() : (array) $item->classes;
      $classes[] = 'menu-item-' . $item->ID;
      $class_names = join( ' ', apply_filters( 'nav_menu_css_class', array_filter( $classes ), $item, $args ) );
      if ( $args->has_children )
        $class_names .= ' dropdown';
      if ( in_array( 'current-menu-item', $classes ) )
        $class_names .= ' active';
      $class_names = $class_names ? ' class="' . esc_attr( $class_names ) . '"' : '';
      $id = apply_filters( 'nav_menu_item_id', 'menu-item-'. $item->ID, $item, $args );
      $id = $id ? ' id="' . esc_attr( $id ) . '"' : '';
      $output .= $indent . '<li' . $id . $value . $class_names .'>';
      $atts = array();
      $atts['title']  = ! empty( $item->title ) ? $item->title  : '';
      $atts['target'] = ! empty( $item->target )  ? $item->target : '';
      $atts['rel']    = ! empty( $item->xfn )   ? $item->xfn  : '';
      // If item has_children add atts to a.
      if ( $args->has_children && $depth === 0 ) {
        $atts['href']       = '#';
        $atts['data-toggle']  = 'dropdown';
        $atts['class']      = 'dropdown-toggle';
        $atts['aria-haspopup']  = 'true';
      } else {
        $atts['href'] = ! empty( $item->url ) ? $item->url : '';
      }
      $atts = apply_filters( 'nav_menu_link_attributes', $atts, $item, $args );
      $attributes = '';
      foreach ( $atts as $attr => $value ) {
        if ( ! empty( $value ) ) {
          $value = ( 'href' === $attr ) ? esc_url( $value ) : esc_attr( $value );
          $attributes .= ' ' . $attr . '="' . $value . '"';
        }
      }
      $item_output = $args->before;
      /*
       * Glyphicons
       * ===========
       * Since the the menu item is NOT a Divider or Header we check the see
       * if there is a value in the attr_title property. If the attr_title
       * property is NOT null we apply it as the class name for the glyphicon.
       */
      if ( ! empty( $item->attr_title ) )
        $item_output .= '<a'. $attributes .'><span class="glyphicon ' . esc_attr( $item->attr_title ) . '"></span>&nbsp;';
      else
        $item_output .= '<a'. $attributes .'>';
      $item_output .= $args->link_before . apply_filters( 'the_title', $item->title, $item->ID ) . $args->link_after;
      $item_output .= ( $args->has_children && 0 === $depth ) ? ' <span class="caret"></span></a>' : '</a>';
      $item_output .= $args->after;
      $output .= apply_filters( 'walker_nav_menu_start_el', $item_output, $item, $depth, $args );
    }
  }
  /**
   * Traverse elements to create list from elements.
   *
   * Display one element if the element doesn't have any children otherwise,
   * display the element and its children. Will only traverse up to the max
   * depth and no ignore elements under that depth.
   *
   * This method shouldn't be called directly, use the walk() method instead.
   *
   * @see Walker::start_el()
   * @since 2.5.0
   *
   * @param object $element Data object
   * @param array $children_elements List of elements to continue traversing.
   * @param int $max_depth Max depth to traverse.
   * @param int $depth Depth of current element.
   * @param array $args
   * @param string $output Passed by reference. Used to append additional content.
   * @return null Null on failure with no changes to parameters.
   */
  public function display_element( $element, &$children_elements, $max_depth, $depth, $args, &$output ) {
        if ( ! $element )
            return;
        $id_field = $this->db_fields['id'];
        // Display this element.
        if ( is_object( $args[0] ) )
           $args[0]->has_children = ! empty( $children_elements[ $element->$id_field ] );
        parent::display_element( $element, $children_elements, $max_depth, $depth, $args, $output );
    }
  /**
   * Menu Fallback
   * =============
   * If this function is assigned to the wp_nav_menu's fallback_cb variable
   * and a manu has not been assigned to the theme location in the WordPress
   * menu manager the function with display nothing to a non-logged in user,
   * and will add a link to the WordPress menu manager if logged in as an admin.
   *
   * @param array $args passed from the wp_nav_menu function.
   *
   */
  public static function fallback( $args ) {
    if ( current_user_can( 'manage_options' ) ) {
      extract( $args );
      $fb_output = null;
      if ( $container ) {
        $fb_output = '<' . $container;
        if ( $container_id )
          $fb_output .= ' id="' . $container_id . '"';
        if ( $container_class )
          $fb_output .= ' class="' . $container_class . '"';
        $fb_output .= '>';
      }
      $fb_output .= '<ul';
      if ( $menu_id )
        $fb_output .= ' id="' . $menu_id . '"';
      if ( $menu_class )
        $fb_output .= ' class="' . $menu_class . '"';
      $fb_output .= '>';
      $fb_output .= '<li><a href="' . admin_url( 'nav-menus.php' ) . '">Add a menu</a></li>';
      $fb_output .= '</ul>';
      if ( $container )
        $fb_output .= '</' . $container . '>';
      echo $fb_output;
    }
  }
}


